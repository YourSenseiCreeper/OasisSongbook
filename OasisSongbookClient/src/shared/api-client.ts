//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');
export const API_CURRENT_USER_ID = new InjectionToken<string>('API_CURRENT_USER_ID');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    songPost(body: CreateSongDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/song";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSongPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSongPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSongPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    songGetAll(): Observable<Song[]> {
        let url_ = this.baseUrl + "/song";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain",
                "Access-Control-Allow-Origin": "*",
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSongGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSongGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Song[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Song[]>;
        }));
    }

    protected processSongGetAll(response: HttpResponseBase): Observable<Song[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Song.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Song[]>([]);
    }

    /**
     * @param songId (optional) 
     * @return Success
     */
    songGet(songId: string | undefined, id: string): Observable<Song> {
        let url_ = this.baseUrl + "/song/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (songId === null)
            throw new Error("The parameter 'songId' cannot be null.");
        else if (songId !== undefined)
            url_ += "songId=" + encodeURIComponent("" + songId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain",
                'Access-Control-Allow-Origin': "*",
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSongGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSongGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Song>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Song>;
        }));
    }

    protected processSongGet(response: HttpResponseBase): Observable<Song> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Song.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Song>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    songbook(body: CreateSongbookDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/songbook";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSongbook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSongbook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSongbook(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    usersPost(body: CreateUserDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUsersPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    usersGetAll(): Observable<User[]> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User[]>;
        }));
    }

    protected processUsersGetAll(response: HttpResponseBase): Observable<User[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User[]>([]);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    usersPatch(body: User | undefined): Observable<void> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersPatch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersPatch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUsersPatch(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    usersGet(id: string): Observable<User> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processUsersGet(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(null as any);
    }
}

@Injectable()
export class SongbookService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    generate(body: GenerateSongbookCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/songbook/generate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGenerate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class Arrangement implements IArrangement {
    _id!: string | undefined;
    type!: ArrangementType;
    verse!: VerseArrangement[] | undefined;

    constructor(data?: IArrangement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.type = _data["type"];
            if (Array.isArray(_data["verse"])) {
                this.verse = [] as any;
                for (let item of _data["verse"])
                    this.verse!.push(VerseArrangement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Arrangement {
        data = typeof data === 'object' ? data : {};
        let result = new Arrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["type"] = this.type;
        if (Array.isArray(this.verse)) {
            data["verse"] = [];
            for (let item of this.verse)
                data["verse"].push(item.toJSON());
        }
        return data;
    }

    clone(): Arrangement {
        const json = this.toJSON();
        let result = new Arrangement();
        result.init(json);
        return result;
    }
}

export interface IArrangement {
    _id: string | undefined;
    type: ArrangementType;
    verse: VerseArrangement[] | undefined;
}

export enum ArrangementType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class CreateArrangementDto implements ICreateArrangementDto {
    type!: ArrangementType;
    verse!: CreateVerseArrangementDto[] | undefined;

    constructor(data?: ICreateArrangementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            if (Array.isArray(_data["verse"])) {
                this.verse = [] as any;
                for (let item of _data["verse"])
                    this.verse!.push(CreateVerseArrangementDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateArrangementDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateArrangementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (Array.isArray(this.verse)) {
            data["verse"] = [];
            for (let item of this.verse)
                data["verse"].push(item.toJSON());
        }
        return data;
    }

    clone(): CreateArrangementDto {
        const json = this.toJSON();
        let result = new CreateArrangementDto();
        result.init(json);
        return result;
    }
}

export interface ICreateArrangementDto {
    type: ArrangementType;
    verse: CreateVerseArrangementDto[] | undefined;
}

export class CreateLineDto implements ICreateLineDto {
    text!: string | undefined;
    repetitions!: number;
    repetitionsInVerse!: number;

    constructor(data?: ICreateLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.repetitions = _data["repetitions"];
            this.repetitionsInVerse = _data["repetitionsInVerse"];
        }
    }

    static fromJS(data: any): CreateLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["repetitions"] = this.repetitions;
        data["repetitionsInVerse"] = this.repetitionsInVerse;
        return data;
    }

    clone(): CreateLineDto {
        const json = this.toJSON();
        let result = new CreateLineDto();
        result.init(json);
        return result;
    }
}

export interface ICreateLineDto {
    text: string | undefined;
    repetitions: number;
    repetitionsInVerse: number;
}

export class CreateSongbookDto implements ICreateSongbookDto {
    userId!: string | undefined;
    title!: string | undefined;
    layout!: SongbookLayout;
    entries!: SongbookEntryDto[] | undefined;

    constructor(data?: ICreateSongbookDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.layout = _data["layout"];
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(SongbookEntryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateSongbookDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSongbookDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["layout"] = this.layout;
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        return data;
    }

    clone(): CreateSongbookDto {
        const json = this.toJSON();
        let result = new CreateSongbookDto();
        result.init(json);
        return result;
    }
}

export interface ICreateSongbookDto {
    userId: string | undefined;
    title: string | undefined;
    layout: SongbookLayout;
    entries: SongbookEntryDto[] | undefined;
}

export class CreateSongDto implements ICreateSongDto {
    title!: string | undefined;
    suggestedBmp!: number;
    verses!: CreateVerseDto[] | undefined;
    arrangements!: CreateArrangementDto[] | undefined;

    constructor(data?: ICreateSongDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.suggestedBmp = _data["suggestedBmp"];
            if (Array.isArray(_data["verses"])) {
                this.verses = [] as any;
                for (let item of _data["verses"])
                    this.verses!.push(CreateVerseDto.fromJS(item));
            }
            if (Array.isArray(_data["arrangements"])) {
                this.arrangements = [] as any;
                for (let item of _data["arrangements"])
                    this.arrangements!.push(CreateArrangementDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateSongDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSongDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["suggestedBmp"] = this.suggestedBmp;
        if (Array.isArray(this.verses)) {
            data["verses"] = [];
            for (let item of this.verses)
                data["verses"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangements)) {
            data["arrangements"] = [];
            for (let item of this.arrangements)
                data["arrangements"].push(item.toJSON());
        }
        return data;
    }

    clone(): CreateSongDto {
        const json = this.toJSON();
        let result = new CreateSongDto();
        result.init(json);
        return result;
    }
}

export interface ICreateSongDto {
    title: string | undefined;
    suggestedBmp: number;
    verses: CreateVerseDto[] | undefined;
    arrangements: CreateArrangementDto[] | undefined;
}

export class CreateUserDto implements ICreateUserDto {
    name!: string | undefined;
    email!: string | undefined;
    password!: string | undefined;
    isActive!: boolean;
    role!: UserRole;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.isActive = _data["isActive"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        data["role"] = this.role;
        return data;
    }

    clone(): CreateUserDto {
        const json = this.toJSON();
        let result = new CreateUserDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUserDto {
    name: string | undefined;
    email: string | undefined;
    password: string | undefined;
    isActive: boolean;
    role: UserRole;
}

export class CreateVerseArrangementDto implements ICreateVerseArrangementDto {
    verseIndex!: number;
    entries!: VerseArrangementEntry[] | undefined;

    constructor(data?: ICreateVerseArrangementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.verseIndex = _data["verseIndex"];
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(VerseArrangementEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateVerseArrangementDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVerseArrangementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["verseIndex"] = this.verseIndex;
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        return data;
    }

    clone(): CreateVerseArrangementDto {
        const json = this.toJSON();
        let result = new CreateVerseArrangementDto();
        result.init(json);
        return result;
    }
}

export interface ICreateVerseArrangementDto {
    verseIndex: number;
    entries: VerseArrangementEntry[] | undefined;
}

export class CreateVerseDto implements ICreateVerseDto {
    lines!: CreateLineDto[] | undefined;
    repetitions!: number;

    constructor(data?: ICreateVerseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(CreateLineDto.fromJS(item));
            }
            this.repetitions = _data["repetitions"];
        }
    }

    static fromJS(data: any): CreateVerseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVerseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        data["repetitions"] = this.repetitions;
        return data;
    }

    clone(): CreateVerseDto {
        const json = this.toJSON();
        let result = new CreateVerseDto();
        result.init(json);
        return result;
    }
}

export interface ICreateVerseDto {
    lines: CreateLineDto[] | undefined;
    repetitions: number;
}

export class GenerateSongbookCommand implements IGenerateSongbookCommand {
    userId!: string | undefined;
    songbookId!: string | undefined;

    constructor(data?: IGenerateSongbookCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.songbookId = _data["songbookId"];
        }
    }

    static fromJS(data: any): GenerateSongbookCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateSongbookCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["songbookId"] = this.songbookId;
        return data;
    }

    clone(): GenerateSongbookCommand {
        const json = this.toJSON();
        let result = new GenerateSongbookCommand();
        result.init(json);
        return result;
    }
}

export interface IGenerateSongbookCommand {
    userId: string | undefined;
    songbookId: string | undefined;
}

export class Line implements ILine {
    _id!: string | undefined;
    text!: string | undefined;
    repetitions!: number;
    repetitionsInVerse!: number;

    constructor(data?: ILine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.text = _data["text"];
            this.repetitions = _data["repetitions"];
            this.repetitionsInVerse = _data["repetitionsInVerse"];
        }
    }

    static fromJS(data: any): Line {
        data = typeof data === 'object' ? data : {};
        let result = new Line();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["text"] = this.text;
        data["repetitions"] = this.repetitions;
        data["repetitionsInVerse"] = this.repetitionsInVerse;
        return data;
    }

    clone(): Line {
        const json = this.toJSON();
        let result = new Line();
        result.init(json);
        return result;
    }
}

export interface ILine {
    _id: string | undefined;
    text: string | undefined;
    repetitions: number;
    repetitionsInVerse: number;
}

export class ModificationHistoryEntry implements IModificationHistoryEntry {
    _id!: string | undefined;
    authorId!: string | undefined;
    authorName!: string | undefined;
    createdOn!: moment.Moment;

    constructor(data?: IModificationHistoryEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.authorId = _data["authorId"];
            this.authorName = _data["authorName"];
            this.createdOn = _data["createdOn"] ? moment(_data["createdOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ModificationHistoryEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ModificationHistoryEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["authorId"] = this.authorId;
        data["authorName"] = this.authorName;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        return data;
    }

    clone(): ModificationHistoryEntry {
        const json = this.toJSON();
        let result = new ModificationHistoryEntry();
        result.init(json);
        return result;
    }
}

export interface IModificationHistoryEntry {
    _id: string | undefined;
    authorId: string | undefined;
    authorName: string | undefined;
    createdOn: moment.Moment;
}

export class Song implements ISong {
    _id: string;
    title: string;
    author: string;
    authorId: string;
    modificationHistory: ModificationHistoryEntry[];
    suggestedBmp: number;
    verses: Verse[];
    arrangements: Arrangement[];

    constructor(data?: ISong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.title = _data["title"];
            this.author = _data["author"];
            this.authorId = _data["authorId"];
            if (Array.isArray(_data["modificationHistory"])) {
                this.modificationHistory = [] as any;
                for (let item of _data["modificationHistory"])
                    this.modificationHistory!.push(ModificationHistoryEntry.fromJS(item));
            }
            this.suggestedBmp = _data["suggestedBmp"];
            if (Array.isArray(_data["verses"])) {
                this.verses = [] as any;
                for (let item of _data["verses"])
                    this.verses!.push(Verse.fromJS(item));
            }
            if (Array.isArray(_data["arrangements"])) {
                this.arrangements = [] as any;
                for (let item of _data["arrangements"])
                    this.arrangements!.push(Arrangement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Song {
        data = typeof data === 'object' ? data : {};
        let result = new Song();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["title"] = this.title;
        data["author"] = this.author;
        data["authorId"] = this.authorId;
        if (Array.isArray(this.modificationHistory)) {
            data["modificationHistory"] = [];
            for (let item of this.modificationHistory)
                data["modificationHistory"].push(item.toJSON());
        }
        data["suggestedBmp"] = this.suggestedBmp;
        if (Array.isArray(this.verses)) {
            data["verses"] = [];
            for (let item of this.verses)
                data["verses"].push(item.toJSON());
        }
        if (Array.isArray(this.arrangements)) {
            data["arrangements"] = [];
            for (let item of this.arrangements)
                data["arrangements"].push(item.toJSON());
        }
        return data;
    }

    clone(): Song {
        const json = this.toJSON();
        let result = new Song();
        result.init(json);
        return result;
    }
}

export interface ISong {
    _id: string | undefined;
    title: string | undefined;
    author: string | undefined;
    authorId: string | undefined;
    modificationHistory: ModificationHistoryEntry[] | undefined;
    suggestedBmp: number;
    verses: Verse[] | undefined;
    arrangements: Arrangement[] | undefined;
}

export class Songbook implements ISongbook {
    _id!: string | undefined;
    title!: string | undefined;
    layout!: SongbookLayout;
    entries!: SongbookEntry[] | undefined;
    docxFilesUrls!: string[] | undefined;

    constructor(data?: ISongbook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.title = _data["title"];
            this.layout = _data["layout"];
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(SongbookEntry.fromJS(item));
            }
            if (Array.isArray(_data["docxFilesUrls"])) {
                this.docxFilesUrls = [] as any;
                for (let item of _data["docxFilesUrls"])
                    this.docxFilesUrls!.push(item);
            }
        }
    }

    static fromJS(data: any): Songbook {
        data = typeof data === 'object' ? data : {};
        let result = new Songbook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["title"] = this.title;
        data["layout"] = this.layout;
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        if (Array.isArray(this.docxFilesUrls)) {
            data["docxFilesUrls"] = [];
            for (let item of this.docxFilesUrls)
                data["docxFilesUrls"].push(item);
        }
        return data;
    }

    clone(): Songbook {
        const json = this.toJSON();
        let result = new Songbook();
        result.init(json);
        return result;
    }
}

export interface ISongbook {
    _id: string | undefined;
    title: string | undefined;
    layout: SongbookLayout;
    entries: SongbookEntry[] | undefined;
    docxFilesUrls: string[] | undefined;
}

export class SongbookEntry implements ISongbookEntry {
    _id!: string | undefined;
    songId!: string | undefined;
    customStyleOptions!: { [key: string]: string; } | undefined;

    constructor(data?: ISongbookEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.songId = _data["songId"];
            if (_data["customStyleOptions"]) {
                this.customStyleOptions = {} as any;
                for (let key in _data["customStyleOptions"]) {
                    if (_data["customStyleOptions"].hasOwnProperty(key))
                        (<any>this.customStyleOptions)![key] = _data["customStyleOptions"][key];
                }
            }
        }
    }

    static fromJS(data: any): SongbookEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SongbookEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["songId"] = this.songId;
        if (this.customStyleOptions) {
            data["customStyleOptions"] = {};
            for (let key in this.customStyleOptions) {
                if (this.customStyleOptions.hasOwnProperty(key))
                    (<any>data["customStyleOptions"])[key] = (<any>this.customStyleOptions)[key];
            }
        }
        return data;
    }

    clone(): SongbookEntry {
        const json = this.toJSON();
        let result = new SongbookEntry();
        result.init(json);
        return result;
    }
}

export interface ISongbookEntry {
    _id: string | undefined;
    songId: string | undefined;
    customStyleOptions: { [key: string]: string; } | undefined;
}

export class SongbookEntryDto implements ISongbookEntryDto {
    songId!: string | undefined;
    customStyleOptions!: { [key: string]: string; } | undefined;

    constructor(data?: ISongbookEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.songId = _data["songId"];
            if (_data["customStyleOptions"]) {
                this.customStyleOptions = {} as any;
                for (let key in _data["customStyleOptions"]) {
                    if (_data["customStyleOptions"].hasOwnProperty(key))
                        (<any>this.customStyleOptions)![key] = _data["customStyleOptions"][key];
                }
            }
        }
    }

    static fromJS(data: any): SongbookEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new SongbookEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["songId"] = this.songId;
        if (this.customStyleOptions) {
            data["customStyleOptions"] = {};
            for (let key in this.customStyleOptions) {
                if (this.customStyleOptions.hasOwnProperty(key))
                    (<any>data["customStyleOptions"])[key] = (<any>this.customStyleOptions)[key];
            }
        }
        return data;
    }

    clone(): SongbookEntryDto {
        const json = this.toJSON();
        let result = new SongbookEntryDto();
        result.init(json);
        return result;
    }
}

export interface ISongbookEntryDto {
    songId: string | undefined;
    customStyleOptions: { [key: string]: string; } | undefined;
}

export enum SongbookLayout {
    _0 = 0,
    _1 = 1,
}

export class User implements IUser {
    _id!: string | undefined;
    name!: string | undefined;
    email!: string | undefined;
    passwordHash!: string | undefined;
    isActive!: boolean;
    role!: UserRole;
    songbooks!: Songbook[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.passwordHash = _data["passwordHash"];
            this.isActive = _data["isActive"];
            this.role = _data["role"];
            if (Array.isArray(_data["songbooks"])) {
                this.songbooks = [] as any;
                for (let item of _data["songbooks"])
                    this.songbooks!.push(Songbook.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["passwordHash"] = this.passwordHash;
        data["isActive"] = this.isActive;
        data["role"] = this.role;
        if (Array.isArray(this.songbooks)) {
            data["songbooks"] = [];
            for (let item of this.songbooks)
                data["songbooks"].push(item.toJSON());
        }
        return data;
    }

    clone(): User {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    _id: string | undefined;
    name: string | undefined;
    email: string | undefined;
    passwordHash: string | undefined;
    isActive: boolean;
    role: UserRole;
    songbooks: Songbook[] | undefined;
}

export enum UserRole {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class Verse implements IVerse {
    _id!: string | undefined;
    lines!: Line[] | undefined;
    repetitions!: number;

    constructor(data?: IVerse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(Line.fromJS(item));
            }
            this.repetitions = _data["repetitions"];
        }
    }

    static fromJS(data: any): Verse {
        data = typeof data === 'object' ? data : {};
        let result = new Verse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        data["repetitions"] = this.repetitions;
        return data;
    }

    clone(): Verse {
        const json = this.toJSON();
        let result = new Verse();
        result.init(json);
        return result;
    }
}

export interface IVerse {
    _id: string | undefined;
    lines: Line[] | undefined;
    repetitions: number;
}

export class VerseArrangement implements IVerseArrangement {
    _id!: string | undefined;
    verseIndex!: number;
    entries!: VerseArrangementEntry[] | undefined;

    constructor(data?: IVerseArrangement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this._id = _data["_id"];
            this.verseIndex = _data["verseIndex"];
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(VerseArrangementEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VerseArrangement {
        data = typeof data === 'object' ? data : {};
        let result = new VerseArrangement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_id"] = this._id;
        data["verseIndex"] = this.verseIndex;
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        return data;
    }

    clone(): VerseArrangement {
        const json = this.toJSON();
        let result = new VerseArrangement();
        result.init(json);
        return result;
    }
}

export interface IVerseArrangement {
    _id: string | undefined;
    verseIndex: number;
    entries: VerseArrangementEntry[] | undefined;
}

export class VerseArrangementEntry implements IVerseArrangementEntry {
    startIndex!: number;
    note!: string | undefined;

    constructor(data?: IVerseArrangementEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startIndex = _data["startIndex"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): VerseArrangementEntry {
        data = typeof data === 'object' ? data : {};
        let result = new VerseArrangementEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startIndex"] = this.startIndex;
        data["note"] = this.note;
        return data;
    }

    clone(): VerseArrangementEntry {
        const json = this.toJSON();
        let result = new VerseArrangementEntry();
        result.init(json);
        return result;
    }
}

export interface IVerseArrangementEntry {
    startIndex: number;
    note: string | undefined;
}

export class ApiException extends Error {
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}